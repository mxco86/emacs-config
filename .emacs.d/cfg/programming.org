* Programming Settings
  #+begin_src emacs-lisp
  (defun mjr/prog-mode-hook ()
    (linum-mode))

  (add-hook 'prog-mode-hook #'mjr/prog-mode-hook)
  #+end_src


* Directory Environment
  #+begin_src emacs-lisp
  (use-package direnv
    :hook
    (flycheck-before-syntax-check . direnv-update-environment)
    :config
    (direnv-mode))
  #+end_src


* Editor Settings
  #+BEGIN_SRC emacs-lisp
  (use-package editorconfig
  :config
  (editorconfig-mode t))
  #+END_SRC


* Code Formatting
  #+begin_src emacs-lisp
  (use-package format-all
    :config
    (add-hook 'prog-mode-hook 'format-all-mode)
    (add-hook 'prog-mode-hook 'format-all-ensure-formatter))
  #+end_src


* Compilation
  #+begin_src emacs-lisp
  (require 'ansi-color)
  (defun mjr/colorize-compilation ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'mjr/colorize-compilation)
  #+end_src


* Code Navigation
  #+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read
          dumb-jump-prefer-searcher 'rg))
  #+end_src


* Language Server Integration
  #+begin_src emacs-lisp
  (use-package eglot
    :config
    (setq eglot-autoshutdown t
          completion-category-overrides '((eglot (styles orderless))))
    (add-to-list 'eglot-server-programs '(terraform-mode "terraform-ls" "serve")))

  (use-package consult-eglot :after eglot)
  #+end_src


* Documentation
  #+begin_src emacs-lisp
  (use-package eldoc
    :pin gnu
    :custom (eldoc-echo-area-prefer-doc-buffer 'maybe))
  #+end_src


* Tree Sitter
  #+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs :after tree-sitter)
  #+end_src


* Linting
  Enable linting on all buffers using the appropriate linter/compiler/syntax
  checker

  #+begin_src emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))
  #+end_src


* Paredit Mode
  - Structured editing of S-expression data
  - https://www.emacswiki.org/emacs/ParEdit
  - Use Paredit mode for all lisp programming buffers

  #+begin_src emacs-lisp
  (use-package paredit
    :commands (paredit-mode)
    :hook (emacs-lisp-mode . paredit-mode)
    :hook (lisp-mode . paredit-mode)
    :hook (slime-repl-mode . paredit-mode)
    :hook (lisp-interaction-mode . paredit-mode))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
  #+end_src


* Docker Tools
  #+begin_src emacs-lisp
  (use-package docker
    :commands (docker))

  (use-package docker-compose-mode
    :commands (docker-compose-mode))

  (use-package dockerfile-mode
    :commands (dockerfile-mode))
  #+end_src


* Language Configuration
*** Emacs Lisp
    #+begin_src emacs-lisp
    (use-package elisp-mode
      :ensure nil
      :config
      (bind-key "RET" 'comment-indent-new-line emacs-lisp-mode-map)
      (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode))
    #+end_src

*** Haskell
    #+begin_src emacs-lisp
    (use-package haskell-mode :mode "\\.hs\\'")
    #+end_src

*** Python
    #+begin_src emacs-lisp
    (use-package python-mode
      :hook (python-mode . eglot-ensure)
      :config
      (setq eglot-workspace-configuration
            '((:pyright . ((useLibraryCodeForTypes . t))))))
    #+end_src

*** Terraform
    #+begin_src emacs-lisp
    (use-package terraform-mode
      :config
      :hook (terraform-mode . eglot-ensure))
    #+end_src

*** Nix
    #+begin_src emacs-lisp
    (use-package nix-mode)
    #+end_src

*** Shell Script
    #+begin_src emacs-lisp
    (use-package sh-script
      :ensure nil
      :config
      (setq sh-basic-offset 2))
    #+end_src

*** YAML
    #+begin_src emacs-lisp

    (use-package yaml-mode
      :commands (yaml-mode)
      :init
      (add-hook 'yaml-mode-hook 'flycheck-mode)
      (add-hook 'yaml-mode-hook 'flyspell-prog-mode))

    (use-package flycheck-yamllint
      :after yaml-mode
      :commands (yaml-mode)
      :init
      (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))
    #+end_src

*** JSON
    #+begin_src emacs-lisp

    (use-package json-mode
      :commands (json-mode)
      :init
      (add-hook 'json-mode-hook #'prettier-js-mode)
      (add-hook 'json-mode-hook #'flycheck-mode)
      (add-hook 'json-mode-hook #'add-node-modules-path)
      :config
      (setq js-indent-level 2))
    #+end_src

*** Node (JavaScript and Typescript)
    #+begin_src emacs-lisp
    (use-package add-node-modules-path
      :commands (add-node-modules-path)
      :init
      (add-hook 'typescript-mode-hook #'add-node-modules-path)
      (add-hook 'js2-mode-hook #'add-node-modules-path)
      (add-hook 'web-mode-hook #'add-node-modules-path))

    (use-package npm-mode
      :commands (npm-mode)
      :init
      (add-hook 'typescript-mode-hook #'npm-mode))
    #+end_src

*** Typescript
    #+begin_src emacs-lisp
    (use-package typescript-mode
      :init
      (setq typescript-indent-level 2))
    #+end_src

*** JavaScript
    #+begin_src emacs-lisp
    (use-package js2-mode
      :mode "\\.js\\'"
      :interpreter "node"
      :init
      (setq js-indent-level 2))
    #+end_src
