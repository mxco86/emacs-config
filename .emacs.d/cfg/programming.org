* Programming Settings
  #+begin_src emacs-lisp
  (defun mjr/prog-mode-hook ()
    (linum-mode))

  (add-hook 'prog-mode-hook #'mjr/prog-mode-hook)
  #+end_src


* Directory Environment
  #+begin_src emacs-lisp
  (use-package direnv
    :hook
    (flycheck-before-syntax-check . direnv-update-environment)
    :config
    (direnv-mode))
  #+end_src


* Editor Settings
  #+BEGIN_SRC emacs-lisp
  (use-package editorconfig
  :config
  (editorconfig-mode t))
  #+END_SRC


* Code Formatting
  #+begin_src emacs-lisp
  (use-package format-all
    :config
    (add-hook 'prog-mode-hook 'format-all-mode)
    (add-hook 'prog-mode-hook 'format-all-ensure-formatter))
  #+end_src


* Compilation
  #+begin_src emacs-lisp
  (require 'ansi-color)
  (defun mjr/colorize-compilation ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'mjr/colorize-compilation)
  #+end_src


* Code Navigation
  #+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read
          dumb-jump-prefer-searcher 'rg))
  #+end_src


* Language Server Integration
  #+begin_src emacs-lisp
  (use-package eglot
    :config
    (setq eglot-autoshutdown t
          completion-category-overrides '((eglot (styles orderless))))
    (add-to-list 'eglot-server-programs '(terraform-mode "terraform-ls" "serve")))

  (use-package consult-eglot :after eglot)
  #+end_src


* Documentation
  #+begin_src emacs-lisp
  (use-package eldoc
    :pin gnu
    :custom (eldoc-echo-area-prefer-doc-buffer 'maybe))
  #+end_src


* Tree Sitter
  #+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs :after tree-sitter)
  #+end_src


* Linting
  Enable linting on all buffers using the appropriate linter/compiler/syntax
  checker

  #+begin_src emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))
  #+end_src


* Paredit Mode
  - Structured editing of S-expression data
  - https://www.emacswiki.org/emacs/ParEdit
  - Use Paredit mode for all lisp programming buffers

  #+begin_src emacs-lisp
  (use-package paredit
    :commands (paredit-mode)
    :hook (emacs-lisp-mode . paredit-mode)
    :hook (lisp-mode . paredit-mode)
    :hook (slime-repl-mode . paredit-mode)
    :hook (lisp-interaction-mode . paredit-mode))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
  #+end_src
