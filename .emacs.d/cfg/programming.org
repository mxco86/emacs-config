* Programming settings                                                       :_:
  #+begin_src emacs-lisp
  (defun mjr/prog-mode-hook ()
    (display-line-numbers-mode))

  (add-hook 'prog-mode-hook #'mjr/prog-mode-hook)
  #+end_src


* Editor settings                                                            :_:
  #+BEGIN_SRC emacs-lisp
  (use-package editorconfig
  :config
  (editorconfig-mode t))
  #+END_SRC


* Code formatting                                                            :_:
  #+begin_src emacs-lisp
  (use-package apheleia
    :config
    (apheleia-global-mode +1))
  #+end_src


* Compilation                                                                :_:
  #+begin_src emacs-lisp
  (require 'ansi-color)
  (defun mjr/colorize-compilation ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'mjr/colorize-compilation)
  #+end_src


* Code navigation                                                            :_:
  #+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read
          dumb-jump-prefer-searcher 'rg))
  #+end_src


* Language server integration                                                :_:
  #+begin_src emacs-lisp
  (use-package eglot
    :config
    (setq eglot-autoshutdown t
          completion-category-overrides '((eglot (styles orderless))))
    (setq eglot-server-programs
          (append eglot-server-programs
                  '((terraform-mode "terraform-ls" "serve")
                    (typescript-ts-mode "typescript-language-server" "--stdio")))))

  (use-package consult-eglot :after eglot)
  #+end_src


* Documentation                                                              :_:
  #+begin_src emacs-lisp
  (use-package eldoc
    :config
    (setq eldoc-echo-area-prefer-doc-buffer 'maybe
          eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly))
  #+end_src


* Paredit mode                                                               :_:
  - Structured editing of S-expression data
  - https://www.emacswiki.org/emacs/ParEdit
  - Use Paredit mode for all lisp programming buffers

  #+begin_src emacs-lisp
  (use-package paredit
    :commands (paredit-mode)
    :hook (emacs-lisp-mode . paredit-mode)
    :hook (lisp-mode . paredit-mode)
    :hook (slime-repl-mode . paredit-mode)
    :hook (lisp-interaction-mode . paredit-mode))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
  #+end_src


* Docker tools                                                               :_:
  #+begin_src emacs-lisp
  (use-package docker
    :commands (docker))

  (use-package docker-compose-mode
    :commands (docker-compose-mode))

  (use-package dockerfile-mode
    :commands (dockerfile-mode))
  #+end_src


* Language configuration                                                     :_:
*** Emacs lisp
    #+begin_src emacs-lisp
    (use-package elisp-mode
      :ensure nil
      :config
      (bind-key "RET" 'comment-indent-new-line emacs-lisp-mode-map))
    #+end_src

*** Haskell
    #+begin_src emacs-lisp
    (use-package haskell-mode :mode "\\.hs\\'")
    #+end_src

*** Python
    #+begin_src emacs-lisp
    (use-package python-mode
      :hook (python-mode . eglot-ensure)
      :config
      (setq eglot-workspace-configuration
            '((:pyright . ((useLibraryCodeForTypes . t))))))

    (use-package python-ts-mode
      :ensure nil
      :hook ((python-ts-mode . eglot-ensure))
      :init
      (push '(python-mode . python-ts-mode) major-mode-remap-alist)
      :config
      (setq eglot-workspace-configuration
            '((:pyright . ((useLibraryCodeForTypes . t))))))
    #+end_src

*** Terraform
    #+begin_src emacs-lisp
    (use-package terraform-mode
      :config
      (defun mjr/terraform-mode-hook ()
        (setq-local create-lockfiles nil)
        (eglot-ensure))
      :hook (terraform-mode . mjr/terraform-mode-hook))
    #+end_src

*** Nix
    #+begin_src emacs-lisp
    (use-package nix-mode :hook (nix-mode . eglot-ensure))
    #+end_src

*** Shell script
    #+begin_src emacs-lisp
    (use-package sh-script
      :hook ((sh-mode . eglot-ensure))
      :config (setq sh-basic-offset 2))
    #+end_src

*** YAML
    #+begin_src emacs-lisp

    (use-package yaml-mode
      :commands (yaml-mode)
      :init
      (add-hook 'yaml-mode-hook 'flycheck-mode))

    (use-package flycheck-yamllint
      :after yaml-mode
      :commands (yaml-mode)
      :init
      (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))
    #+end_src

*** JSON
    #+begin_src emacs-lisp
    (use-package json-mode
      :commands (json-mode)
      :init
      (add-hook 'json-mode-hook #'prettier-js-mode)
      (add-hook 'json-mode-hook #'flycheck-mode)
      (add-hook 'json-mode-hook #'add-node-modules-path)
      :config
      (setq js-indent-level 2))
    #+end_src

*** Node (JavaScript and Typescript)
    #+begin_src emacs-lisp
    (use-package add-node-modules-path
      :commands (add-node-modules-path)
      :hook ((typescript-mode . add-node-modules-path)
             (typescript-ts-mode-hook . add-node-modules-path)
             (js2-mode-hook . add-node-modules-path)
             (web-mode-hook . add-node-modules-path)))

    (use-package npm-mode
      :commands (npm-mode)
      :hook ((typescript-mode . npm-mode)
             (typescript-ts-mode-hook . npm-mode)))
    #+end_src

*** Typescript
    #+begin_src emacs-lisp
    (use-package typescript-mode
      :hook ((typescript-mode . eglot-ensure))
      :config
      (setq typescript-indent-level 2))

    (use-package typescript-ts-mode
      :hook ((typescript-ts-mode . eglot-ensure))
      :init
      (push '(typescript-mode . typescript-ts-mode) major-mode-remap-alist)
      :config
      (setq typescript-indent-level 2))
    #+end_src

*** JavaScript
    #+begin_src emacs-lisp
    (use-package js2-mode
      :mode "\\.js\\'"
      :interpreter "node"
      :init
      (setq js-indent-level 2))
    #+end_src

*** Web (multi-lang)
    #+begin_src emacs-lisp
    (use-package web-mode
      :mode (("\\.html?\\'" . web-mode)
             ("\\.tsx\\'" . web-mode)
             ("\\.jsx\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-block-padding 2
            web-mode-comment-style 2
            web-mode-enable-css-colorization t
            web-mode-enable-auto-pairing t
            web-mode-enable-comment-keywords t
            web-mode-enable-current-element-highlight t
            web-mode-enable-auto-indentation nil)
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))

      ;; enable typescript-tslint checker
      (flycheck-add-mode 'typescript-tslint 'web-mode))
    #+end_src

*** Java
    #+begin_src emacs-lisp
    (defun mjr/enable-eglot-java-hook ()
      (interactive)
      (add-hook 'java-mode-hook 'eglot-ensure))

    (defun mjr/disable-eglot-java-hook ()
      (interactive)
      (remove-hook 'java-mode-hook 'eglot-ensure))

    (use-package groovy-mode :mode "\\.gradle\\'")
    #+end_src

*** Kotlin
    #+begin_src emacs-lisp
    (use-package kotlin-mode :mode "\\.kt\\'")

    (defun mjr/enable-eglot-kotlin-hook ()
      (interactive)
      (add-hook 'kotlin-mode-hook 'eglot-ensure))

    (defun mjr/disable-eglot-kotlin-hook ()
      (interactive)
      (remove-hook 'kotlin-mode-hook 'eglot-ensure))

    (use-package flycheck-kotlin
      :init
      (flycheck-kotlin-setup))
    #+end_src

*** Go
  #+begin_src emacs-lisp
  (use-package go-mode
    :commands (go-mode)
    :init
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'go-eldoc-setup)
    :config
    (defun mjr-go-mode-hook ()
      (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
               (concat "go run " buffer-file-name))))

    (add-hook 'go-mode-hook 'mjr-go-mode-hook)
    :bind (:map go-mode-map ("M-." . godef-jump)))

  (use-package go-eldoc
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))
  #+end_src

*** Rust
  #+begin_src emacs-lisp
  (use-package rust-mode
    :commands (rust-mode)
    :init
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    (add-hook 'rust-mode-hook #'racer-mode)
    :config
    (setq rust-format-on-save t)
    (setq racer-cmd "~/.cargo/bin/racer") ;; Rustup binaries PATH
    (setq racer-rust-src-path "/Users/mryall/Src/rust/rust/src")) ;; Rust source code PATH

  (use-package racer
    :after rust-mode
    :init
    (add-hook 'racer-mode-hook #'eldoc-mode))

  (use-package cargo :after rust-mode)

  (use-package flycheck-rust
    :after rust-mode
    :init
    (add-hook 'flycheck-mode-hook 'flycheck-rust-setup))
  #+end_src

*** Just
    #+begin_src emacs-lisp
    (use-package just-mode)
    #+end_src
