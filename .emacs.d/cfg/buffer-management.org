* Buffer Management Configuration
*** Buffer Selection
    IBuffer provides a nice overview interface of open buffers

    - https://www.emacswiki.org/emacs/IbufferMode

    #+begin_src emacs-lisp

    (use-package ibuffer
      :commands (ibuffer)
      :init
      (bind-key "C-x C-b" 'ibuffer)
      :config
      (setq ibuffer-saved-filter-groups
            (quote (("default"
                     ("Emacs"
                      (or
                       (mode . help-mode)
                       (mode . grep-mode)
                       (mode . completion-list-mode)
                       (mode . emacs-lisp-mode)
                       (name . "\\*scratch\\*")
                       (name . "\\*Messages\\*")))
                     ("Org"
                      (mode . org-mode))
                     ("Code Review"
                      (or
                       (mode . github-review-mode)))
                     ("Programming"
                      (or
                       (name . "\\*inferior-lisp\\*")
                       (name . "*slime*")
                       (mode . perl-mode)
                       (mode . cperl-mode)
                       (mode . java-mode)
                       (mode . python-mode)
                       (mode . c-mode)
                       (mode . lisp-mode)
                       (mode . js2-mode)
                       (mode . typescript-mode)
                       (mode . js-mode)
                       (mode . nix-mode)
                       (mode . kotlin-mode)
                       (mode . web-mode)))
                     ("Data/Config"
                      (or
                       (name . "JSON")
                       (name . "YAML")))
                     ("Source Ctrl"
                      (or
                       (mode . magit-mode)
                       (mode . magit-cherry-mode)
                       (mode . magit-diff-mode)
                       (mode . magit-log-mode)
                       (mode . magit-log-select-mode)
                       (mode . magit-merge-preview-mode)
                       (mode . magit-process-mode)
                       (mode . magit-refs-mode)
                       (mode . magit-reflog-mode)
                       (mode . magit-revision-mode)
                       (mode . magit-stash-mode)
                       (mode . magit-stashes-mode)
                       (mode . magit-status-mode))))))))

      (setq ibuffer-show-empty-filter-groups nil)

      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default")))
    #+end_src

*** Folding
    Vimish-fold allows creation of arbitrary in-buffer folds based on the selected region

    #+begin_src emacs-lisp

    (use-package vimish-fold
      :commands (vimish-fold-toggle vimish-fold)
      :init
      (vimish-fold-global-mode 1))
    #+end_src
*** Popup Buffers
    #+begin_src emacs-lisp
    (winner-mode t)

    (use-package shackle
      :config
      (setq shackle-rules '((compilation-mode :noselect t))
            shackle-default-rule '(:select t)))
    #+end_src

*** Window Navigation
    Windmove allows navigation between windows using arrow keys which is
    useful for quickly switching between a couple of active windows. Ace
    Window allows jumping between numbered windows which is useful when there
    are more to navigate

    #+begin_src emacs-lisp
    (use-package ace-window
      :defer t
      :init
      (progn
        (global-set-key (kbd "C-x o") 'ace-window)))

    (use-package windmove
      :config
      (global-set-key (kbd "C-c <left>")  'windmove-left)
      (global-set-key (kbd "C-c <right>") 'windmove-right)
      (global-set-key (kbd "C-c <up>")    'windmove-up)
      (global-set-key (kbd "C-c <down>")  'windmove-down))
    #+end_src

*** PDF Buffers
    #+begin_src emacs-lisp
    (use-package pdf-tools
      :config
      (pdf-tools-install :no-query)
      (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
    #+end_src

*** Buffer Navigation
    #+begin_src emacs-lisp
    (use-package avy
      :bind (("C-c l" . #'avy-goto-line)
             ("C-c j" . #'avy-goto-char-timer)
             ("C-c v" . #'avy-goto-word-1)))
    #+end_src
*** Undo
    #+begin_src emacs-lisp
    (use-package undo-tree
      :diminish
      :config
      (global-undo-tree-mode)
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
    #+end_src
