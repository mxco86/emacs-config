
* Org-Mode Configuration                                              :TOC_3:
    - [[#list-setup][List Setup]]
    - [[#behaviours][Behaviours]]
    - [[#keybindings][Keybindings]]
    - [[#fix-conflicts-and-disputed-keys][Fix Conflicts and Disputed Keys]]
    - [[#org-agenda][Org-Agenda]]
    - [[#hooks][Hooks]]
    - [[#org-babel][Org-Babel]]
    - [[#generate-table-of-contents][Generate Table of Contents]]
    - [[#habits][Habits]]
    - [[#clocks][Clocks]]
    - [[#exports][Exports]]
    - [[#contacts][Contacts]]
    - [[#org-roam][Org-Roam]]
    - [[#org-download][Org-Download]]
    - [[#org-trello][Org-Trello]]

*** List Setup
    Extend the sub-items bullet count by two (1,3,5 characters etc.) to give a
    more pronounced tree and make bulleted sub-items appear to be indented.
    #+BEGIN_SRC emacs-lisp

    (setq org-odd-levels-only t)
    (setq org-hide-leading-stars t)
    #+END_SRC

*** Behaviours
    Ensure keyboard navigation works sensibly in headings and when tags are in
    place on an item
    #+begin_src emacs-lisp

    (setq org-return-follows-link t)
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-insert-heading-respect-content t)
    (setq org-startup-folded 'content)
    #+end_src

*** Keybindings
    #+BEGIN_SRC emacs-lisp

      (define-key global-map "\C-ca" 'org-agenda)

    #+END_SRC

*** Fix Conflicts and Disputed Keys
    #+BEGIN_SRC emacs-lisp
    (setq org-replace-disputed-keys t)
    (setq org-support-shift-select 'always)
    #+END_SRC

*** Org-Agenda
    #+BEGIN_SRC emacs-lisp

    (setq org-agenda-files
          '("~/Org/Documents/org"
            "~/Org/Documents/org-roam"))

    (setq org-agenda-prefix-forgmat
          '((agenda . " %i %s %-12c")
            (todo . " %i %-12:c")
            (tags . " %i %-12:c")
            (search . " %i %-12:c")))
    #+END_SRC

*** Hooks
    As we loaded org-mode in the initial bootstrap .emacs file we add hooks
    here instead of in the use-package definition
    #+begin_src emacs-lisp

    (add-hook 'org-mode-hook
              '(lambda ()
                 (turn-on-flyspell)
                 (auto-fill-mode t)))
    #+end_src

    Add a before-save-hook that's specific to org-mode files
    #+begin_src emacs-lisp

    (defun mjr-org-mode-before-save-hook ()
      (when (eq major-mode 'org-mode)
        (mjr/insert-literate-config-file-list)))

    (add-hook 'before-save-hook #'mjr-org-mode-before-save-hook)
    #+end_src

*** Org-Babel
    #+begin_src emacs-lisp
    (setq org-src-tab-acts-natively t
          org-edit-src-content-indentation 0
          org-src-window-setup 'current-window
          org-edit-src-persistent-message nil
          org-src-strip-leading-and-trailing-blank-lines t)

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell . t)
                                   (kotlin . t)
                                   (typescript . t)))

    (define-advice org-edit-src-exit (:before (&rest _args))
      (delete-trailing-whitespace))
    #+end_src

*** Generate Table of Contents
    Automatically generates a table of contents for an org buffer based on the
    headings within. The TOC is regenerated on buffer save and placed under a
    heading with the tag :TOC:
    #+begin_src emacs-lisp
    (use-package toc-org
      :ensure t
      :hook (org-mode . toc-org-mode)
      :after org)
    #+end_src

*** Habits
    #+begin_src emacs-lisp

    (require 'org-habit)
    (setq org-log-into-drawer t)
    (setq org-todo-keywords '("BACKLOG" "TODO" "DOING" "DONE(!)"))
    #+end_src
*** Clocks
    #+begin_src emacs-lisp
    (setq org-duration-format (quote h:mm))
    #+end_src
*** Exports
    #+begin_src emacs-lisp
    (use-package ox-hugo
      :ensure t
      :after ox)
    #+end_src

*** Contacts
    #+begin_src emacs-lisp
    (require 'org-contacts)
    (setq org-contacts-files (list org-contacts-file))
    (setq org-capture-templates
          '(("c" "Contacts" entry (file org-contacts-file)
             "* %(org-contacts-template-name)
      :PROPERTIES:
      :EMAIL: %(org-contacts-template-email)
      :END:")))
    #+end_src

*** Org-Roam
    #+begin_src emacs-lisp
    (use-package org-roam
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n s" . org-store-link)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n f" . org-roam-node-find))
      :init
      (setq org-roam-v2-ack t)
      :config
      (setq org-roam-directory "~/Org/Documents/org-roam"
            org-roam-node-display-template "${hierarchy:*} ${tags:20}"
            org-id-link-to-org-use-id 'create-if-interactive
            org-roam-mode-section-functions (list #'org-roam-backlinks-section
                                                  #'org-roam-reflinks-section
                                                  #'org-roam-unlinked-references-section))
    
      (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
        "Return the file TITLE for the node."
        (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
    
      (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
        "Return the hierarchy for the node."
        (let ((title (org-roam-node-title node))
              (olp (org-roam-node-olp node))
              (level (org-roam-node-level node))
              (filetitle (org-roam-node-filetitle node)))
          (concat
           (if (> level 0) (concat filetitle " > "))
           (if (> level 1) (concat (string-join olp " > ") " > "))
           title)))
    
      (org-roam-setup))
    
      ;; (use-package org-roam
      ;;     :after org
      ;;     :hook (org-mode . org-roam-mode)
      ;;     :config
      ;;     (setq org-roam-directory "~/Org/Documents/org-roam"
      ;;           org-roam-use-timestamp-as-filename nil
      ;;           org-roam-db-location "~/.org-roam/org-roam.db"
      ;;           org-roam-buffer-position 'bottom
      ;;           org-roam-completion-everywhere t
      ;;           org-roam-graphviz-executable (executable-find "neato")
      ;;           org-roam-graphviz-extra-options '(("overlap" . "false")))
    
      ;;     (let ((graph-viewer-binary))
      ;;       (if (mjr/sys-linux-p)
      ;;           (setq graph-viewer-binary "firefox")
      ;;         (setq graph-viewer-binary "/Applications/Firefox.app/Contents/MacOS/firefox-bin"))
      ;;       (setq org-roam-graph-viewer graph-viewer-binary))
    
      ;;     (defun org-roam--db-reconnect ()
      ;;       (interactive)
      ;;       (setq org-roam--db-connection nil)
      ;;       (setq org-roam--db-connection (make-hash-table :test #'equal)))
    
      ;;     (require 'org-roam-protocol)
      ;;     :bind
      ;;     ("C-c n l" . org-roam)
      ;;     ("C-c n t" . org-roam-today)
      ;;     ("C-c n f" . org-roam-find-file)
      ;;     ("C-c n i" . org-roam-insert)
      ;;     ("C-c n g" . org-roam-show-graph))
    
      ;; (use-package deft
      ;;   :after org
      ;;   :bind
      ;;   ("C-c n d" . deft)
      ;;   :custom
      ;;   (deft-recursive t)
      ;;   (deft-use-filter-string-for-filename t)
      ;;   (deft-default-extension "org")
      ;;   (deft-directory "~/Org/Documents/org-roam"))
    
      ;; (use-package org-roam-server
      ;;   :ensure t
      ;;   :config
      ;;   (setq org-roam-server-host "127.0.0.1"
      ;;         org-roam-server-port 5880
      ;;         org-roam-server-export-inline-images t
      ;;         org-roam-server-authenticate nil
      ;;         org-roam-server-network-poll t
      ;;         org-roam-server-network-arrows nil
      ;;         org-roam-server-network-label-truncate t
      ;;         org-roam-server-network-label-truncate-length 60
      ;;         org-roam-server-network-label-wrap-length 20))
    #+end_src
*** Org-Download
    #+begin_src emacs-lisp
    (use-package org-download
        :after org
        :config
        (setq-default org-download-image-dir "~/Org/Documents/org-roam/files"))
    #+end_src

*** Org-Trello
    #+begin_src emacs-lisp
    (use-package org-trello
        :after org
        :config
        (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))
        (add-hook 'org-mode-hook
                  (lambda ()
                    (let ((filename (buffer-file-name (current-buffer))))
                      (when (and filename (string= "trello" (file-name-extension filename)))
                        (org-trello-mode))))))
    #+end_src
