
* Org-Mode Configuration                                              :TOC_3:
    - [[#list-setup][List Setup]]
    - [[#behaviours][Behaviours]]
    - [[#keybindings][Keybindings]]
    - [[#fix-conflicts-and-disputed-keys][Fix Conflicts and Disputed Keys]]
    - [[#org-agenda][Org-Agenda]]
    - [[#hooks][Hooks]]
    - [[#org-babel][Org-Babel]]
    - [[#generate-table-of-contents][Generate Table of Contents]]
    - [[#habits][Habits]]
    - [[#clocks][Clocks]]
    - [[#exports][Exports]]
    - [[#org-roam][Org-Roam]]
    - [[#org-download][Org-Download]]
    - [[#colours][Colours]]
    - [[#org-id][Org-Id]]
    - [[#presentation][Presentation]]

*** List Setup
    Extend the sub-items bullet count by two (1,3,5 characters etc.) to give a
    more pronounced tree and make bulleted sub-items appear to be indented.
    #+BEGIN_SRC emacs-lisp

    (setq org-odd-levels-only t)
    (setq org-hide-leading-stars t)
    #+END_SRC

*** Behaviours
    Ensure keyboard navigation works sensibly in headings and when tags are in
    place on an item
    #+begin_src emacs-lisp
    (setq org-return-follows-link t)
    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-insert-heading-respect-content t)
    (setq org-startup-folded 'content)
    (setq org-adapt-indentation t)
    (setq org-hide-emphasis-markers t)
    (setq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                 (vm-imap . vm-visit-imap-folder-other-frame)
                                 (gnus . org-gnus-no-new-news)
                                 (file . find-file)
                                 (wl . wl-other-frame)))
    #+end_src

*** Keybindings
    #+BEGIN_SRC emacs-lisp
    (define-key global-map "\C-ca" 'org-agenda)
    (define-key global-map "\M-2" 'org-global-cycle)
    #+END_SRC

*** Fix Conflicts and Disputed Keys
    #+BEGIN_SRC emacs-lisp
    (setq org-replace-disputed-keys t)
    (setq org-support-shift-select 'always)
    #+END_SRC

*** Org-Agenda
    #+BEGIN_SRC emacs-lisp

    (setq org-agenda-files
          '("~/Org/Documents/org"
            "~/Org/Documents/org-roam"))

    (setq org-agenda-prefix-format
          '((agenda . " %i %s %-12:c")
            (todo . " %b ")
            (tags . " %i %-12:c")
            (search . " %i %-12:c")))

    (setq org-agenda-custom-commands
          '(("n" todo "NEXT")))

    (setq org-refile-targets
          '(("~/Org/Documents/org-roam/task-archive.org" :maxlevel . 2)))
    #+END_SRC

*** Hooks
    As we loaded org-mode in the initial bootstrap .emacs file we add hooks
    here instead of in the use-package definition
    #+begin_src emacs-lisp

    (add-hook 'org-mode-hook
              '(lambda ()
                 (turn-on-flyspell)
                 (auto-fill-mode t)))
    #+end_src

    Add a before-save-hook that's specific to org-mode files
    #+begin_src emacs-lisp

    (defun mjr-org-mode-before-save-hook ()
      (when (eq major-mode 'org-mode)
        (mjr/insert-literate-config-file-list)))

    (add-hook 'before-save-hook #'mjr-org-mode-before-save-hook)
    #+end_src

*** Org-Babel
    #+begin_src emacs-lisp
    (setq org-src-tab-acts-natively t
          org-edit-src-content-indentation 0
          org-src-window-setup 'current-window
          org-edit-src-persistent-message nil
          org-src-strip-leading-and-trailing-blank-lines t)

    ;; Add packages for org-babel languages
    (use-package ob-kotlin)
    (use-package ob-typescript)

    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((shell . t)
                                   (haskell . t)
                                   (kotlin . t)
                                   (typescript . t)))

    (define-advice org-edit-src-exit (:before (&rest _args))
      (delete-trailing-whitespace))
    #+end_src

*** Generate Table of Contents
    Automatically generates a table of contents for an org buffer based on the
    headings within. The TOC is regenerated on buffer save and placed under a
    heading with the tag :TOC:
    #+begin_src emacs-lisp
    (use-package toc-org
      :hook (org-mode . toc-org-mode)
      :after org)
    #+end_src

*** Habits
    #+begin_src emacs-lisp
    (setq org-log-into-drawer nil)
    (setq org-todo-keywords '("TODO" "NEXT" "DONE"))
    #+end_src
*** Clocks
    #+begin_src emacs-lisp
    (setq org-duration-format (quote h:mm))
    #+end_src
*** Exports
    #+begin_src emacs-lisp
    ;; (use-package ox-hugo :after ox)
    #+end_src

*** Org-Roam
    #+begin_src emacs-lisp
      (use-package org-roam
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n s" . org-store-link)
               ("C-c n i" . org-roam-node-insert)
               ("C-c n d" . org-roam-dailies-goto-today)
               ("C-c n f" . org-roam-node-find)
               :map org-roam-preview-map
               ("<return>" . mjr/org-roam-preview-visit)
               :map org-roam-node-map
               ("<return>" . mjr/org-roam-node-visit)
               :map org-roam-grep-map
               ("<return>" . mjr/org-roam-grep-visit))
        :init
        (setq org-roam-v2-ack t)
        :config

        (setq org-roam-directory "~/Org/Documents/org-roam"
              org-roam-node-display-template "${hierarchy:*} ${tags:20}"
              org-id-link-to-org-use-id 'create-if-interactive
              org-roam-completion-everywhere nil
              org-roam-mode-section-functions (list #'org-roam-backlinks-section
                                                    #'org-roam-reflinks-section
                                                    #'org-roam-unlinked-references-section))

        (defun mjr/org-roam-preview-visit (file point)
          (interactive (list (org-roam-buffer-file-at-point 'assert)
                             (oref (magit-current-section) point)))
          (let ((current-prefix-arg 4))
            (call-interactively 'org-roam-preview-visit (vector file point))))

        (defun mjr/org-roam-node-visit (file)
          (interactive (list (org-roam-node-at-point t)))
          (let ((current-prefix-arg 4))
            (call-interactively 'org-roam-node-visit (vector file))))

        (defun mjr/org-roam-grep-visit (file prefix row col)
          (interactive (list (org-roam-buffer-file-at-point t)
                             current-prefix-arg
                             (oref (magit-current-section) row)
                             (oref (magit-current-section) col)))
          (let ((current-prefix-arg 4))
            (call-interactively 'org-roam-grep-visit (vector file current-prefix-arg row col))))

        (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
          "Return the file TITLE for the node."
          (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

        (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
          "Return the hierarchy for the node."
          (let ((title (org-roam-node-title node))
                (olp (org-roam-node-olp node))
                (level (org-roam-node-level node))
                (filetitle (org-roam-node-filetitle node)))
            (concat
             (if (> level 0) (concat filetitle " > "))
             (if (> level 1) (concat (string-join olp " > ") " > "))
             title)))

        (org-roam-setup))


    #+end_src
*** Org-Download
    #+begin_src emacs-lisp
    (use-package org-download
        :after org
        :config
        (setq-default org-download-image-dir "~/Org/Documents/org-roam/files"))
    #+end_src
*** Colours
    #+begin_src emacs-lisp
    (set-face-attribute 'org-document-title nil :weight 'bold :foreground "#eee8d5" :background "#002b36" :inverse-video nil :weight 'bold :height 1.6)
    (set-face-attribute 'org-level-1 nil :inverse-video t :weight 'bold)
    (set-face-attribute 'org-level-2 nil :weight 'bold)

    (set-face-attribute 'org-block-begin-line nil :background "#002b36")
    (set-face-attribute 'org-block nil :background "#002b36")
    (set-face-attribute 'org-block-end-line nil :background "#002b36")
    #+end_src
*** Org-Id
    #+begin_src emacs-lisp
    (setq org-id-extra-files
          (directory-files-recursively "~/Org/Documents/notebooks" ".*"))
    #+end_src
*** Presentation
    #+begin_src emacs-lisp
    (use-package org-present
      :bind (:map org-present-mode-keymap
                  ("C-c C-=" . mjr/org-present-big)
                  ("C-c C--" . mjr/org-present-small))
      :config
      (setq org-present-text-scale 3))

    (use-package visual-fill-column)

    (defun mjr/org-present-start ()
      (visual-fill-column-mode 1)
      (visual-line-mode 1)
      (hl-line-mode -1)
      (setq visual-fill-column-center-text t)
      (setq visual-fill-column-width 80)
      (setq header-line-format " "))

    (defun mjr/org-present-end ()
      (visual-fill-column-mode 0)
      (visual-line-mode 0)
      (hl-line-mode 1)
      (setq header-line-format nil))

    (defun mjr/org-present-big ()
      "Make font size larger."
      (interactive)
      (text-scale-increase 0)
      (text-scale-increase org-present-text-scale)
      (setq visual-fill-column-width 72)
      (visual-fill-column-mode 1))

    (defun mjr/org-present-small ()
      "Change font size back to original."
      (interactive)
      (text-scale-increase 0)
      (setq visual-fill-column-width 80)
      (visual-fill-column-mode 1))

    (add-hook 'org-present-mode-hook 'mjr/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'mjr/org-present-end)
    #+end_src
