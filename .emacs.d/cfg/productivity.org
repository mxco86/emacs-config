#+TITLE: Productivity

Productivity tools and other things to help generally get things done.

* Spell Check                                                        :_:

  Enable spell check on all text buffers, which includes ~org-mode~.

  #+begin_src emacs-lisp
  (use-package jinx
    :hook ((text-mode . jinx-mode)
           (prog-mode . jinx-mode)
           (conf-mode . jinx-mode))
    :bind ("C-;" . jinx-correct))
  #+end_src


* File and Directory Search                                          :_:

  Mode for searching using ripgrep. It's very fast but I'm not sure I like the
  user interface very much. I mainly use ~consult-ripgrep~ for this anyway but
  keep this around for use with ~project.el~ and for searching special occasions.

  #+begin_src emacs-lisp
  (use-package rg
    :config
    (rg-enable-default-bindings)
    (setq rg-command-line-flags '("--hidden")))
  #+end_src


* Terminal Emulation                                                 :_:

  I generally prefer using an dedicated terminal application but using
  [[https://codeberg.org/akib/emacs-eat][Eat]] gets pretty close to that within Emacs and using it is a very nice
  experience.

  #+begin_src emacs-lisp
  (use-package eat
    :config
    (setq explicit-shell-file-name "~/.nix-profile/bin/zsh"))
  #+end_src


* Projects                                                           :_:

  Project context and organisation tools which help when switching around and
  focusing relevant buffers and files. Adding the extra config for the local
  project roots means I can use non-vc directories as projects by adding an
  empty '.project' file.

  #+begin_src emacs-lisp
  (use-package project
    :pin gnu
    :config
    (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?g))
    (add-to-list 'project-switch-commands '(rg "ripgrep" ?h))
    (setq project-vc-extra-root-markers '(".project"))

    (defun mjr/project-find-file-from-diff ()
      "Find and open a project file from a diff string"
      (interactive)
      (let ((diff-filename (thing-at-point 'filename))
            (project-dir (completing-read "Project dir:" project--list)))
        (find-file (concat project-dir "/" diff-filename)))))
  #+end_src


* In-Buffer Links                                                    :_:

  [[https://github.com/noctuid/link-hint.el][Link Hint]] enables opening all kinds of links in the appropriate manner
  (browser etc.). It has an avy-like interface for selecting the link you want
  to operate on. I just used it to open the github README from this org file.

  #+begin_src emacs-lisp
  (use-package link-hint
    :bind
    ("C-c l o" . link-hint-open-link)
    ("C-c l c" . link-hint-copy-link))
  #+end_src


* Browser Text                                                       :_:

  Start a server for editing browser text fields…

  #+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (setq atomic-chrome-url-major-mode-alist
          '(("github" . gfm-mode))
          atomic-chrome-extension-type-list '(ghost-text))
    (atomic-chrome-start-server))
  #+end_src


* Server                                                             :_:

  …and start a server for editing everything else

  #+begin_src emacs-lisp
  (use-package server
    :config
    (unless (server-running-p) (server-start)))
  #+end_src
