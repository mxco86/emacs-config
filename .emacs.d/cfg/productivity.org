
Productivity tools and other things to help generally get things done.

* Text Snippets

  I mainly use this to insert org source blocks which seems like ridiculous
  overkill to include this whole package for, but maybe one day I will expand
  my usage (heh!).

  #+begin_src emacs-lisp
  (use-package yasnippet :config (yas-global-mode t))
  #+end_src


* Spell Check

  Enable spell check on all text buffers, which includes ~org-mode~. Flyspell
  for other modes is added in the specific mode configuration. Don't defer
  loading of Flyspell as it has some interactions with org-mode (setting
  ~flyspell-delayed-commands~) that cause intermittent start up errors when
  loading is deferred. I wrote this in the distant past and have no idea if
  it is still true.

  #+begin_src emacs-lisp
  (use-package flyspell
    :hook (text-mode . turn-on-flyspell)
    :init
    (bind-key "C-c cw" 'flyspell-auto-correct-word)
    :config
    (setq ispell-program-name "aspell"
          ispell-dictionary   "british"
          flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face)))
  #+end_src


* File and Directory Search

  Mode for searching using ripgrep. It's very fast but I'm not sure I like the
  user interface very much. I mainly use ~consult-ripgrep~ for this anyway but
  keep this around for use with ~project.el~ and for searching special occasions.

  #+begin_src emacs-lisp
  (use-package rg
    :config
    (rg-enable-default-bindings)
    (setq rg-command-line-flags '("--hidden")))
  #+end_src


* Terminal Emulation

  I generally prefer using an dedicated terminal application but using
  [Eat](https://codeberg.org/akib/emacs-eat) gets pretty close to that within
  Emacs and using it is a very nice experience.

  #+begin_src emacs-lisp
  (use-package eat
    :config
    (setq explicit-shell-file-name "~/.nix-profile/bin/zsh"))
  #+end_src


* Projects

  Project context and organisation tools which help when switching around and
  focusing relevant buffers and files.

  #+begin_src emacs-lisp
  (use-package project
    :pin gnu
    :config
    (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?g))
    (add-to-list 'project-switch-commands '(rg "ripgrep" ?h))

    (defun mjr/project-find-file-from-diff ()
      "Find and open a project file from a diff string"
      (interactive)
      (let ((diff-filename (thing-at-point 'filename))
            (project-dir (completing-read "Project dir:" project--list)))
        (find-file (concat project-dir "/" diff-filename)))))
  #+end_src


* In-Buffer Links

  [Link Hint](https://github.com/noctuid/link-hint.el) enables opening all
  kinds of links in the appropriate manner (browser etc.). It has an avy-like
  interface for selecting the link you want to operate on. I just used it to
  open the github README from this org file.

  #+begin_src emacs-lisp
  (use-package link-hint
    :bind
    ("C-c l o" . link-hint-open-link)
    ("C-c l c" . link-hint-copy-link))
  #+end_src


* Browser Text

  Start a server for editing browser text fields…

  #+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (setq atomic-chrome-url-major-mode-alist
          '(("github" . gfm-mode))
          atomic-chrome-extension-type-list '(ghost-text))
    (atomic-chrome-start-server))
  #+end_src


* Server
  …and start a server for editing everything else

  #+begin_src emacs-lisp
  (use-package server
    :config
    (unless (server-running-p) (server-start)))
  #+end_src
