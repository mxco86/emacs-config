#+TITLE: Productivity

Productivity tools and other things to help get things done.

* Spell check                                                                :_:
  Enable spell check on all text buffers, which includes ~org-mode~.

  #+begin_src emacs-lisp
  (use-package jinx
    :hook ((text-mode . jinx-mode)
           (prog-mode . jinx-mode)
           (conf-mode . jinx-mode))
    :bind ("C-x C-l" . jinx-correct)
    :config
    (setq jinx-languages "en_GB"))
  #+end_src


* Linting                                                                    :_:
  Use Vale to lint prose in text modes via Flymake

  #+begin_src emacs-lisp
  (use-package flymake-vale
    :load-path "~/.emacs.d/elisp/flymake-vale/"
    :config
    (add-hook 'text-mode-hook #'flymake-vale-load)
    (add-hook 'org-mode-hook #'flymake-vale-load)
    (add-hook 'markdown-mode-hook #'flymake-vale-load))

  (use-package flymake-cursor)
  #+end_src


* File and directory search                                                  :_:
  Mode for searching using ripgrep. Fast but not sure the user interface is
  particularly nice. I mainly use ~consult-ripgrep~ for this anyway but
  keep this around for use with ~project.el~ and for searching special occasions.

  #+begin_src emacs-lisp
  (use-package rg
    :config
    (rg-enable-default-bindings)
    (setq rg-command-line-flags '("--hidden")))
  #+end_src


* Terminal emulation                                                         :_:
  I prefer using an dedicated terminal application but using [[https://codeberg.org/akib/emacs-eat][Eat]] gets pretty
  close to that within Emacs

  #+begin_src emacs-lisp
  (use-package eat
    :config
    (setq explicit-shell-file-name "~/.nix-profile/bin/zsh"))
  #+end_src


* Projects                                                           :_:
  Project context and organisation tools which help when switching around and
  focusing relevant buffers and files. Adding the extra config for the local
  project roots means I can use non-vc directories as projects by adding an
  empty '.project' file.

  #+begin_src emacs-lisp
  (use-package project
    :pin gnu
    :config
    (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?g))
    (add-to-list 'project-switch-commands '(rg "ripgrep" ?h))
    (setq project-vc-extra-root-markers '(".project"))

    (defun mjr/project-find-file-from-diff ()
      "Find and open a project file from a diff string"
      (interactive)
      (let ((diff-filename (thing-at-point 'filename))
            (project-dir (completing-read "Project dir:" project--list)))
        (find-file (concat project-dir "/" diff-filename)))))

  (use-package project-x
    :load-path "~/.emacs.d/elisp/"
    :after project
    :config
    (setq project-x-save-interval 600)
    (project-x-mode 1))
  #+end_src


* In-buffer links                                                            :_:
  [[https://github.com/noctuid/link-hint.el][Link Hint]] enables opening all kinds of links in the appropriate manner
  (browser etc.). It has an avy-like interface for selecting the link you want
  to operate on. I just used it to open the github README from this org file.

  #+begin_src emacs-lisp
  (use-package link-hint
    :bind
    ("C-c l o" . link-hint-open-link)
    ("C-c l c" . link-hint-copy-link))
  #+end_src


* Browser text                                                               :_:
  Start a server for editing browser text fields…

  #+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (setq atomic-chrome-url-major-mode-alist
          '(("github" . gfm-mode))
          atomic-chrome-extension-type-list '(ghost-text))
    (atomic-chrome-start-server))
  #+end_src


* Server                                                             :_:

  …and start a server for editing everything else

  #+begin_src emacs-lisp
  (use-package server
    :config
    (if (display-graphic-p)
        (unless (server-running-p) (server-start))))
  #+end_src
