* Main Emacs Config                                                   :TOC_5:
    - [[#use-package][Use Package]]
    - [[#general-configuration][General Configuration]]
        - [[#hooks][Hooks]]
        - [[#initial-setup][Initial Setup]]
        - [[#personal-details][Personal Details]]
        - [[#basic-editing][Basic Editing]]
        - [[#backups-and-autosaves][Backups and Autosaves]]
        - [[#scrolling][Scrolling]]
        - [[#settings-to-make-things-a-bit-nicer][Settings to Make Things a Bit Nicer]]
    - [[#text-editing][Text Editing]]
    - [[#font-and-display][Font and Display]]
    - [[#environment-variables][Environment Variables]]
    - [[#macos-specific-configuration][MacOS Specific Configuration]]
    - [[#dired-configuration][Dired Configuration]]
    - [[#mode-line-configuration][Mode line Configuration]]
        - [[#minor-modes][Minor Modes]]
        - [[#mood-line][Mood Line]]
    - [[#help][Help]]
    - [[#functional-area-configuration][Functional Area Configuration]]
    - [[#functional-area-configuration-files][Functional Area Configuration Files]]
    - [[#directory-environment][Directory Environment]]
    - [[#footer][Footer]]

*** Use Package
    Where possible I configure everything via the ~use-package~ macro.
    This helps to keep everything consistent and makes code execution order
    and dependencies between packages explicit. Also, I need as much help as I
    can get to keep things from getting all tangled up. We have to load it
    first…

    #+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile (require 'use-package))
    (setq use-package-always-ensure t)
    #+end_src

*** General Configuration
    It's possible to use ~use-package~ to configure 'emacs' as it is defined
    as a feature. I use this to keep global settings together.

    #+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-w" . backward-kill-word)
      ("C-x C-k" . kill-region)
      ("C-c C-k" . kill-region)
      ("C-x r" . query-replace-regexp)
      ("C-x l" . goto-line)
      ("C-c b" . bury-buffer)
      ("C-c f" . revert-buffer)
      ("C-x C-m" . execute-extended-command)
      ("C-x f" . find-file)
     #+end_src
***** Hooks
      Always, always delete trailing whitespace

      #+begin_src emacs-lisp
      :hook (before-save . delete-trailing-whitespace)
      #+end_src

***** Initial Setup
      Don't mess about with anything at start up - just start up. Put any
      custom variables in their own file. I don't use custom on purpose but
      sometimes things end up in here by magic

      #+begin_src emacs-lisp
      :config
      (setq inhibit-startup-message t)
      (setq custom-file "~/.emacs.d/custom.el")
      (load custom-file 'noerror)
      #+end_src

***** Personal Details
      All about little ol' me

      #+begin_src emacs-lisp
      (setq user-full-name "Matthew Ryall"
            user-mail-address "matthew@mexico86.co.uk")
      #+end_src

***** Basic Editing
      #+begin_src emacs-lisp
      (setq split-width-threshold 120)
      (setq-default fill-column 78)
      (setq-default truncate-lines t)
      (setq-default indent-tabs-mode nil)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
      (setq select-enable-primary t)
      (setq select-enable-clipboard t)
      #+end_src

***** Backups and Autosaves
      Keep both backup and autosave files in their own directories rather than
      in the directory of the file being edited
      #+begin_src emacs-lisp
      (setq backup-dir "~/.emacs.d/.backups/")
      (make-directory backup-dir t)
      (setq backup-directory-alist '(("." . "~/.emacs.d/.backups")))
      (setq autosave-dir "~/.emacs.d/.autosaves/")
      (make-directory autosave-dir t)
      (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
      (setq delete-old-versions -1)
      (setq version-control t)
      #+end_src

***** Scrolling
      #+begin_src emacs-lisp
      (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
      (setq mouse-wheel-progressive-speed nil)
      (setq mouse-wheel-follow-mouse 't)
      (setq scroll-step 1)
      #+end_src

***** Settings to Make Things a Bit Nicer
      #+begin_src emacs-lisp
      (setq ring-bell-function 'ignore)
      (setq next-line-add-newlines t)
      (setq sentence-end-double-space nil)
      (setq confirm-kill-emacs 'yes-or-no-p)
      (setq gc-cons-threshold 100000000)
      (setq truncate-string-ellipsis "…")
      (setq help-window-select t)
      (setq completions-detailed t)

      (fset 'yes-or-no-p 'y-or-n-p)

      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (mouse-avoidance-mode 'exile)
      (column-number-mode)
      (line-number-mode)
      (transient-mark-mode)
      (global-font-lock-mode)
      (show-paren-mode)
      (global-auto-revert-mode)
      (global-hl-line-mode)
      (global-prettify-symbols-mode)
      (global-subword-mode)

      (global-unset-key "\C-z")
      (global-unset-key "\C-x\C-z"))
      #+end_src
*** Text Editing
    Amazingly useful unfill functions. I use these all the time to remove line
    breaks when writing in org-mode and then pasting into other systems like
    Slack
    #+begin_src emacs-lisp
    (use-package unfill)
    #+end_src

*** Font and Display
    Use the 'Hack' font which is designed for source code and also includes
    powerline glyphs which I use on the mode line
    #+begin_src emacs-lisp
    (defun mjr/init-font-size (frame font value)
      (set-frame-parameter frame 'font
                           (concat font "-" (number-to-string value))))

    (defun mjr/set-font (size)
      (interactive "nSize: ")
      (mjr/init-font-size (selected-frame) "Hack" size))

    (defun mjr/approprate-font-size ()
      (if (> (display-pixel-width) 3000)
          16
        (if (<= (display-pixel-height) 900) 16 10)))

    (use-package all-the-icons :if (display-graphic-p))

    (use-package all-the-icons-dired
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package all-the-icons-completion
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode)
      :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
      :init
      (all-the-icons-completion-mode))

    (mjr/set-font (mjr/approprate-font-size))
    (toggle-frame-maximized)
    #+end_src

*** Environment Variables
    #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :config
      (dolist (var '("SSH_AUTH_SOCK"))
        (add-to-list 'exec-path-from-shell-variables var))
      (exec-path-from-shell-initialize))
    #+end_src

*** MacOS Specific Configuration
    #+begin_src emacs-lisp
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'meta)
    (setq ns-pop-up-frames nil)
    #+end_src

*** Dired Configuration
    #+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :config
      (setq dired-create-destination-dirs 'ask
            dired-kill-when-opening-new-dired-buffer t
            dired-do-revert-buffer t
            dired-mark-region t))
    #+end_src

*** Mode line Configuration
***** Minor Modes
      #+begin_src emacs-lisp
      (use-package minions :config (minions-mode t))
      #+end_src
***** Mood Line
      #+begin_src emacs-lisp
      (use-package mood-line
        :after minions
        :config
        (mood-line-mode)
        ;; Add minions mode
        (defun mood-line-segment-major-mode ()
          "Displays the current major mode in the mode-line."
          (concat (format-mode-line minions-mode-line-modes 'mood-line-major-mode) " "))
        (setq mood-line-show-cursor-point t
              mood-line-show-encoding-information t
              mood-line-show-eol-style t))
      #+end_src

***** COMMENT Spaceline
      Powerline-like theme for the mode line

      - https://github.com/TheBB/spaceline

      #+begin_src emacs-lisp
      (use-package spaceline
        :after minions
        :config
        (set-face-attribute 'mode-line-active nil :inherit 'mode-line)
        (spaceline-emacs-theme)
        (spaceline-define-segment minor-modes
          (if (bound-and-true-p minions-mode)
              (format-mode-line minions-mode-line-modes)
            (spaceline-minor-modes-default)))
        (spaceline-emacs-theme)
        (spaceline-toggle-major-mode))
      #+end_src

*** Help
    #+begin_src emacs-lisp
    (use-package helpful
      :bind (("C-h f" . helpful-callable)
             ("C-h v" . helpful-variable)
             ("C-h k" . helpful-key)
             ("C-c C-d" . helpful-at-point)))
    #+end_src

*** Functional Area Configuration
    I split up some more extensive configs into files for each functional
    area. These contain ~use-package~ declarations for loading and configuring
    packages and any other configuration code required. These files are also
    tangled and loaded by org-babel and a list is inserted into this file for
    reference

    #+begin_src emacs-lisp
    (defun mjr/load-literate-cfg ()
      "Load literate config files using org-babel.")
    (let ((cfg-conf-dir "~/.emacs.d/cfg/"))
      (mapcar #'(lambda (conf-file)
                  (org-babel-load-file conf-file))
              (directory-files-recursively cfg-conf-dir "^[^.]\.*.org")))

    (defun mjr/insert-literate-config-file-list ()
      (interactive)
      (let ((cfg-conf-dir "~/.emacs.d/cfg/")
            (file-list nil))
        (setq file-list (directory-files-recursively cfg-conf-dir "^[^.]\.*.org"))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "[:]CFGLST:" (point-max) t)
            (let ((beg (point))
                  (end
                   (save-excursion
                     (when (search-forward-regexp "^\\*" (point-max))
                       (forward-line -1))
                     (end-of-line)
                     (point))))
              (delete-region beg end))
            (insert "\n")
            (insert "    Configuration files for more specific functional areas\n")
            (mapcar '(lambda (file) (insert (format "    - [[file:%s]]\n" (substring file 11)))) file-list)))))
    #+end_src

*** Functional Area Configuration Files                              :CFGLST:
    Configuration files for more specific functional areas
    - [[file:cfg/buffer-management.org]]
    - [[file:cfg/completion.org]]
    - [[file:cfg/email.org]]
    - [[file:cfg/lsp.org]]
    - [[file:cfg/minibuffer.org]]
    - [[file:cfg/org-mode.org]]
    - [[file:cfg/productivity.org]]
    - [[file:cfg/programming.org]]
    - [[file:cfg/vcs.org]]

*** Directory Environment
    #+begin_src emacs-lisp
    (use-package envrc
      :config
      (envrc-global-mode))
    #+end_src

*** Footer
   We thank you for your patience
   #+begin_src emacs-lisp
   (mjr/load-literate-cfg)
   #+end_src
