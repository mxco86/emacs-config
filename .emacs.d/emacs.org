
* Main Emacs Config                                                   :TOC_5:
    - [[#personal-information][Personal Information]]
    - [[#use-package-extensions][Use Package Extensions]]
    - [[#frame-and-buffer-behaviour][Frame and Buffer Behaviour]]
    - [[#custom-variables][Custom Variables]]
    - [[#buffer-behaviour][Buffer Behaviour]]
    - [[#font-and-display][Font and Display]]
    - [[#function-aliases][Function Aliases]]
    - [[#global-key-mappings][Global Key Mappings]]
    - [[#variables][Variables]]
    - [[#mode-specific-configuration-files][Mode-Specific Configuration Files]]
    - [[#file-backups-and-autosave][File Backups and Autosave]]
    - [[#os-specific-configuration][OS Specific Configuration]]
    - [[#system-information][System Information]]
    - [[#scrolling][Scrolling]]
    - [[#literate-mode-configurations][Literate Mode Configurations]]
    - [[#footer][Footer]]

*** Personal Information
    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Matthew Ryall"
          user-mail-address "matthew@mexico86.co.uk")
    #+END_SRC

*** Use Package Extensions
    Enable Emacs to install dependent system packages
    #+BEGIN_SRC emacs-lisp
    (use-package use-package-ensure-system-package
      :ensure t)
    #+END_SRC

*** Frame and Buffer Behaviour
    I prefer sparse frames so remove as much as we can
    #+BEGIN_SRC emacs-lisp
    (setq-default inhibit-startup-message  t)
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    #+END_SRC

*** Custom Variables
    Place all custom-defined variables in their own file and store the custom
    variable file in the local machine's home directory outside of version
    control. This enables us to keep specific config local to each machine

    #+BEGIN_SRC emacs-lisp
    (setq-default custom-file "~/.emacs-custom.el")
    (load custom-file 'noerror)
    #+END_SRC

*** Buffer Behaviour
    #+BEGIN_SRC emacs-lisp
    (setq line-number-mode t)
    (setq column-number-mode t)
    (setq split-width-threshold 120)
    (setq-default fill-column 78)
    (setq-default truncate-lines t)
    (setq-default indent-tabs-mode nil)
    (setq ring-bell-function 'ignore)
    (setq transient-mark-mode t)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
    (setq select-enable-primary t)
    (setq select-enable-clipboard t)
    (setq next-line-add-newlines t)
    (setq sentence-end-double-space nil)
    (setq confirm-kill-emacs 'yes-or-no-p)
    (add-to-list 'write-file-functions 'delete-trailing-whitespace)

    (global-font-lock-mode t)
    (mouse-avoidance-mode 'exile)
    (show-paren-mode t)
    (global-auto-revert-mode 1)
    (global-subword-mode 1)
    (global-prettify-symbols-mode 1)
    #+END_SRC

*** Font and Display
    Use the 'Hack' font which is designed for source code and also includes
    powerline glyphs which I use on the mode line
    #+BEGIN_SRC emacs-lisp
    (defun mjr/init-font-size (frame font value)
      (set-frame-parameter frame 'font
                           (concat font "-" (number-to-string value))))

    (defun mjr/set-font (size)
      (interactive "nSize: ")
      (mjr/init-font-size (selected-frame) "Hack" size))

    (defun mjr/approprate-font-size ()
      (if (> (display-pixel-width) 3000)
          16
        (if (<= (display-pixel-height) 900) 16 10)))

    (mjr/set-font (mjr/approprate-font-size))
    (toggle-frame-maximized)
    #+END_SRC

*** Function Aliases
    #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Global Key Mappings
    #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-w"     'backward-kill-word)
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
    (global-set-key "\C-xr"    'query-replace-regexp)
    (global-set-key "\C-xl"    'goto-line )
    (global-set-key "\C-cb"    'bury-buffer )
    (global-set-key "\C-cf"    'revert-buffer )
    (global-set-key "\r"       'newline-and-indent)
    (global-set-key "\C-x\C-m" 'execute-extended-command)
    (global-unset-key "\C-z")
    (global-unset-key "\C-x\C-z")
    #+END_SRC

*** Variables
    #+begin_src emacs-lisp
      (use-package exec-path-from-shell
        :config
        (dolist (var '("SSH_AUTH_SOCK"))
          (add-to-list 'exec-path-from-shell-variables var))
        (exec-path-from-shell-initialize))
    #+end_src

*** Mode-Specific Configuration Files
    I split up my more specific configs into files for each general
    area. These contain ~use-package~ declarations for loading and configuring
    packages and any other configuration code required. This is probably
    overkill for a lot of things that only use a single package with no config
    but where there is more complex code I think it works well. There are a
    couple of functions defined to load directories for mode-specific configs
    and then insert a link to the config file into this document

    #+BEGIN_SRC emacs-lisp
    (defun mjr/load-literate-cfg ()
      "Load literate config files using org-babel.")
    (let ((cfg-conf-dir "~/.emacs.d/cfg/"))
      (mapcar #'(lambda (conf-file)
                  (org-babel-load-file conf-file))
              (directory-files-recursively cfg-conf-dir "^[^.]\.*.org")))

    (defun mjr/insert-literate-config-file-list ()
      (interactive)
      (let ((cfg-conf-dir "~/.emacs.d/cfg/")
            (file-list nil))
        (setq file-list (directory-files-recursively cfg-conf-dir "^[^.]\.*.org"))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "[:]CFGLST:" (point-max) t)
            (let ((beg (point))
                  (end
                   (save-excursion
                     (when (search-forward-regexp "^\\*" (point-max))
                       (forward-line -1))
                     (end-of-line)
                     (point))))
              (delete-region beg end))
            (insert "\n")
            (insert "    Configuration for more specific functionality, modes and areas of work\n")
            (mapcar '(lambda (file) (insert (format "    - [[file:%s]]\n" (substring file 11)))) file-list)))))
    #+END_SRC

*** File Backups and Autosave
    Keep backups and autosaves in specific directories rather than leaving
    temporary files all over the filesystem
    #+BEGIN_SRC emacs-lisp
    (setq-default backup-dir "~/.emacs.d/.backups/")
    (make-directory backup-dir t)
    (setq-default backup-directory-alist '(("." . "~/.emacs.d/.backups")))
    (setq-default autosave-dir "~/.emacs.d/.autosaves/")
    (make-directory autosave-dir t)
    (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
    (setq-default delete-old-versions -1)
    (setq-default version-control t)
    #+END_SRC

*** OS Specific Configuration
    #+BEGIN_SRC emacs-lisp
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'meta)
    (setq ns-pop-up-frames nil)
    #+END_SRC

*** System Information
    Utility functions to distinguish between system types. Use these to set
    the package manager used to install system dependencies via use-package
    #+BEGIN_SRC emacs-lisp
    (defun mjr/sys-macos-p ()
      (equal system-type 'darwin))

    (defun mjr/sys-linux-p ()
      (equal system-type 'gnu/linux))

    (setq system-packages-package-manager
          (cond ((mjr/sys-linux-p) 'nix)
                ((mjr/sys-macos-p) 'brew)))
    #+END_SRC

*** Scrolling
    Scroll one line at a time instead of jumping ahead. Taken from:
      - https://www.emacswiki.org/emacs/SmoothScrolling
    #+begin_src emacs-lisp
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
    (setq mouse-wheel-progressive-speed nil)
    (setq mouse-wheel-follow-mouse 't)
    (setq scroll-step 1)
    #+end_src

*** Literate Mode Configurations                                     :CFGLST:
    Configuration for more specific functionality, modes and areas of work
    - [[file:cfg/develop/go.org]]
    - [[file:cfg/develop/java.org]]
    - [[file:cfg/develop/lang.org]]
    - [[file:cfg/develop/lsp.org]]
    - [[file:cfg/develop/typescript.org]]
    - [[file:cfg/develop/web.org]]
    - [[file:cfg/buffer-management.org]]
    - [[file:cfg/color-theme.org]]
    - [[file:cfg/docker.org]]
    - [[file:cfg/emacs-lisp.org]]
    - [[file:cfg/email.org]]
    - [[file:cfg/flycheck.org]]
    - [[file:cfg/markup.org]]
    - [[file:cfg/minibuffer.org]]
    - [[file:cfg/mode-line.org]]
    - [[file:cfg/org-mode.org]]
    - [[file:cfg/paredit.org]]
    - [[file:cfg/programming.org]]
    - [[file:cfg/projects.org]]
    - [[file:cfg/rust.org]]
    - [[file:cfg/search.org]]
    - [[file:cfg/snippets.org]]
    - [[file:cfg/terminal.org]]
    - [[file:cfg/typescript.org]]
    - [[file:cfg/vcs.org]]
    - [[file:cfg/writing.org]]

*** Footer
   We thank you for your patience
    #+begin_src emacs-lisp
      (mjr/load-literate-cfg)
    #+end_src
